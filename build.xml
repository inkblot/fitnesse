<project name="Fitnesse" default="dist" basedir=".">
    <description>
        Fitnesse is a wiki wrapper for fit, an acceptance test framework.
    </description>

    <property environment="env"/>
    <property name="env.FITNESSE_TEST_PORT" value="8080"/>
    <property name="src2" location="srcFitServerTests"/>
    <property name="fitnesseRoot" value="FitNesseRoot"/>
    <property name="fitnesseRootZip" value="FitNesseRoot.zip"/>
    <property name="zipDir" location="dist/fitnesse"/>
    <property name="results.dir" location="test-results"/>

    <property name="src" location="${basedir}/src"/>
    <property name="build" location="${basedir}/build"/>
    <property name="build.classes" location="${build}/classes"/>
    <property name="lib" location="${basedir}/lib"/>
    <property name="dist" location="${basedir}/dist"/>
    <property name="fitnesse.jar" location="${dist}/fitnesse.jar"/>

    <path id="classpath">
        <pathelement path="${build.classes}"/>
        <fileset dir="${lib}/compile"/>
        <fileset dir="legacy-lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="clean" description="delete all build-generated data">
        <delete dir="${build}"/>
        <delete dir="${results.dir}"/>
        <delete dir="${lib}"/>
        <delete dir="${dist}"/>
    </target>

    <target name="init">
        <mkdir dir="${build}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.classes}/Resources"/>
        <mkdir dir="${results.dir}"/>
        <mkdir dir="${lib}"/>
        <mkdir dir="${lib}/compile"/>
        <mkdir dir="${dist}"/>
    </target>

    <target name="jar" depends="build, createUpdateLists" description="generate the jar file">
        <jar jarfile="${fitnesse.jar}" basedir="${build.classes}">
            <include name="**/*.class"/>
            <exclude name="**/*Test.class"/>
            <exclude name="**/*TestSuite.class"/>
            <include name="Resources/**"/>
            <include name="tasks.properties"/>

            <fileset dir="${build.classes}" includes="**/SystemUnderTest.class,**/MySystemUnderTest.class"/>

            <zipfileset src="legacy-lib/htmlparser.jar"/>
            <zipfileset src="legacy-lib/json.jar"/>
            <zipfileset src="legacy-lib/velocity-1.6.2-dep.jar"/>

            <manifest>
                <attribute name="Built-By" value="Object Mentor, Inc."/>
                <attribute name="Main-Class" value="fitnesseMain.FitNesseMain"/>
            </manifest>
        </jar>
    </target>

    <target name="createUpdateLists" depends="copyResources" description="creates two lists of files to be udpated">
        <java classpath="${build.classes}" classname="fitnesse.updates.UpdateFileList" failonerror="true">
            <arg value="-baseDirectory:${build.classes}/Resources"/>
            <arg value="-doNotReplace:FitNesseRoot/files/css/fitnesse.css"/>
            <arg value="-doNotReplace:FitNesseRoot/files/css/fitnesse_print.css"/>
            <arg value="-doNotReplace:FitNesseRoot/FrontPage/content.txt"/>
            <arg value="-doNotReplace:FitNesseRoot/FrontPage/properties.xml"/>
            <arg value="FitNesseRoot/files/images"/>
            <arg value="FitNesseRoot/files/css"/>
            <arg value="FitNesseRoot/files/javascript"/>
            <arg value="FitNesseRoot/files/html"/>
            <arg value="FitNesseRoot/files/templates"/>
            <arg value="FitNesseRoot/FitNesse"/>
            <arg value="FitNesseRoot/FrontPage"/>
            <arg value="FitNesseRoot/PageFooter"/>
            <arg value="FitNesseRoot/PageHeader"/>
        </java>
        <copy todir="${build.classes}/Resources">
            <fileset dir=".">
                <include name="updateList"/>
                <include name="updateDoNotCopyOverList"/>
            </fileset>
        </copy>
    </target>

    <target name="copyResources" description="copy images, css, and other resources into the classes directory">
        <copy todir="${build.classes}/Resources/FitNesseRoot/files">
            <fileset dir="FitNesseRoot/files">
                <include name="images/**"/>
                <include name="css/*.css"/>
                <include name="javascript/**/*.js"/>
                <include name="html/**"/>
                <include name="templates/**"/>
                <exclude name="juUnitTestLink.js"/>
                <exclude name="**/unused/**"/>
            </fileset>
        </copy>
        <copy todir="${build.classes}/Resources/FitNesseRoot">
            <fileset dir="FitNesseRoot">
                <include name="FitNesse/**"/>
                <include name="FrontPage/**"/>
                <include name="PageHeader/**"/>
                <include name="PageFooter/**"/>
                <exclude name="**/*.zip"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="init, stamp-version" description="compile the source (make)">
        <javac srcdir="src" destdir="${build.classes}" classpathref="classpath" debug="true" source="1.6" target="1.6"/>
        <copy file="extra/ant/tasks.properties" todir="${build.classes}"/>
    </target>

    <target name="stamp-version">
        <delete file="pom.xml"/>
        <delete file="src/fitnesse/FitNesseVersion.java"/>
        <delete file="FitNesseRoot/FrontPage/content.txt"/>
        <tstamp/>
        <filter token="version" value="${DSTAMP}"/>
        <copy filtering="true" file="templates/pom.xml.template" tofile="pom.xml"/>
        <copy filtering="true" file="templates/FitNesseVersion.java.template"
              tofile="src/fitnesse/FitNesseVersion.java"/>
        <copy filtering="true" file="templates/FrontPage.content.txt.template"
              tofile="FitNesseRoot/FrontPage/content.txt"/>
    </target>

    <target name="unit_test" depends="compile" description="run the unit tests">
        <junit forkmode="once" fork="yes" printsummary="no" haltonfailure="yes" haltonerror="yes" dir="${basedir}">
            <classpath refid="classpath"/>
            <formatter type="xml" usefile="true"/>
            <formatter type="plain" usefile="false"/>
            <batchtest todir="${results.dir}">
                <fileset dir="src">
                    <include name="**/*Test.java"/>
                    <exclude name="**/ShutdownResponderTest.java"/>
                    <exclude name="**/QueryTableBaseTest.java"/>
                    <exclude name="**/Test.java"/>
                    <exclude name="**/SystemUnderTest.java"/>
                    <exclude name="**/MySystemUnderTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="acceptance_tests_xml" depends="jar">
        <java jar="${fitnesse.jar}" failonerror="true" fork="true" output="${build}/fitnesse-results.xml">
            <arg value="-c"/>
            <arg value="FitNesse.SuiteAcceptanceTests?suite&amp;format=xml"/>
            <arg value="-p"/>
            <arg value="9234"/>
        </java>
    </target>

    <target name="acceptance_tests" depends="jar">
        <java jar="${fitnesse.jar}" failonerror="true" fork="true">
            <arg value="-c"/>
            <arg value="FitNesse.SuiteAcceptanceTests?suite&amp;format=text"/>
            <arg value="-p"/>
            <arg value="9234"/>
        </java>
    </target>

    <target name="unit_tests" depends="clean, unit_test"
            description="builds code from scratch, runs all the unit tests"/>

    <target name="build" depends="clean, compile" description="clean, then compile the source"/>

    <target name="dist" depends="unit_tests,acceptance_tests_xml,jar"/>

</project>
