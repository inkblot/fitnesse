<project name="Fitnesse" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Fitnesse is a wiki wrapper for fit, an acceptance test framework.
    </description>

    <property environment="env"/>
    <property name="src" location="${basedir}/src"/>
    <property name="src.util" location="${basedir}/util/src"/>
    <property name="resources" location="${basedir}/resources"/>
    <property name="test.resources" location="${basedir}/test-resources"/>
    <property name="build" location="${basedir}/build"/>
    <property name="build.util" location="${build}/util"/>
    <property name="build.util.classes" location="${build.util}/classes"/>
    <property name="build.classes" location="${build}/classes"/>
    <property name="test.classes" location="${build}/test/classes"/>
    <property name="test.results" location="${build}/test/results"/>
    <property name="test.reports" location="${build}/test/reports"/>
    <property name="integration" location="${build}/integration"/>
    <property name="integration.tests" location="${integration}/tests"/>
    <property name="lib" location="${basedir}/lib"/>
    <property name="lib.runtime" location="${lib}/runtime"/>
    <property name="lib.compile" location="${lib}/compile"/>
    <property name="lib.test" location="${lib}/test"/>
    <property name="dist" location="${build}/dist"/>
    <property name="fitnesse.jar" location="${dist}/fitnesse.jar"/>
    <property name="temp" location="${build}/tmp"/>
    <property name="built.by" value="Nate Riffe &lt;inkblot@movealong.org&gt;"/>

    <property name="ivy.version" value="2.0.0"/>
    <property name="ivy.lib" location="${env.HOME}/.ant/lib"/>
    <property name="ivy.jar.file" location="${ivy.lib}/ivy-${ivy.version}.jar"/>

    <target name="clean" description="delete all build-generated data">
        <delete dir="${build}"/>
        <delete dir="${lib}"/>
    </target>

    <target name="-check-ivy">
        <condition property="download-ivy.once">
            <available file="${ivy.jar.file}"/>
        </condition>
    </target>

    <target name="-download-ivy" depends="-check-ivy" unless="download-ivy.once">
        <mkdir dir="${ivy.lib}"/>
        <get
                src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
                dest="${ivy.jar.file}" usetimestamp="true" verbose="true"/>

        <get src="http://mirrors.ibiblio.org/pub/mirrors/maven2/com/jcraft/jsch/0.1.38/jsch-0.1.38.jar"
             dest="${ivy.lib}/jsch-0.1.38.jar" usetimestamp="true" verbose="true"/>
    </target>

    <target name="-init-ivy" depends="-download-ivy" unless="init-ivy.once">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.lib}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:settings file="ivy-settings.xml"/>
        <property name="init-ivy.once" value="yes"/>
    </target>

    <target name="resolve" depends="-init-ivy" description="Resolve dependencies">
        <ivy:resolve/>
        <echo message="Resolved: ${ivy.resolved.configurations}"/>
        <ivy:retrieve pattern="${lib}/[conf]/[artifact]-[revision].[ext]"/>
    </target>

    <target name="init" depends="resolve">
        <mkdir dir="${build}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.classes}/fitnesse"/>
        <mkdir dir="${build.classes}/Resources"/>
        <mkdir dir="${test.classes}"/>
        <mkdir dir="${test.results}"/>
        <mkdir dir="${test.reports}"/>
        <mkdir dir="${integration}"/>
        <mkdir dir="${integration.tests}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${temp}"/>
    </target>

    <path id="util.compile.path">
        <fileset dir="${lib.runtime}" includes="*.jar"/>
        <!--<fileset dir="${lib.compile}" includes="*.jar"/>-->
    </path>

    <path id="all.compile.path">
        <pathelement path="${build.util.classes}"/>
        <fileset dir="${lib.runtime}" includes="*.jar"/>
        <!--<fileset dir="${lib.compile}" includes="*.jar"/>-->
    </path>

    <target name="-compile">
        <mkdir dir="${compile.classes}"/>
        <javac srcdir="${compile.src}" destdir="${compile.classes}" debug="true" source="1.6" target="1.6"
               includeantruntime="false" classpathref="${compile.path}"/>
    </target>

    <target name="compile-util" depends="init">
        <antcall target="-compile">
            <param name="compile.src" value="${src.util}"/>
            <param name="compile.classes" value="${build.util.classes}"/>
            <param name="compile.path" value="util.compile.path"/>
        </antcall>
    </target>

    <target name="compile-all" depends="init,compile-util">
        <antcall target="-compile">
            <param name="compile.src" value="${src}"/>
            <param name="compile.classes" value="${build.classes}"/>
            <param name="compile.path" value="all.compile.path"/>
        </antcall>
    </target>

    <target name="compile" depends="compile-util,compile-all"/>

    <target name="build-properties" depends="init">
        <tstamp>
            <format property="version.stamp" pattern="yyyyMMdd"/>
        </tstamp>
        <tstamp>
            <format property="time.init" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>

        <propertyfile file="${build.classes}/fitnesse/build.properties">
            <entry key="build.version" value="v${version.stamp}"/>
            <entry key="build.date" value="${time.init}"/>
        </propertyfile>
    </target>

    <target name="jar" depends="compile, build-properties">
        <jar jarfile="${fitnesse.jar}">
            <manifest>
                <attribute name="Built-By" value="${built.by}"/>
                <attribute name="Main-Class" value="fitnesseMain.FitNesseMain"/>
            </manifest>

            <fileset dir="${build.util.classes}" includes="**/*"/>
            <fileset dir="${build.classes}" includes="**/*"/>
            <fileset dir="${resources}" includes="**/*"/>
        </jar>
    </target>

    <path id="test.compile.path">
        <pathelement path="${test.classes}"/>
        <pathelement path="${build.util.classes}"/>
        <pathelement path="${build.classes}"/>
        <fileset dir="${lib.test}" includes="*.jar"/>
        <fileset dir="${lib.runtime}" includes="*.jar"/>
        <!--<fileset dir="${lib.compile}" includes="*.jar"/>-->
    </path>

    <target name="compile-tests" depends="compile" description="compile the unit tests">
        <antcall target="-compile">
            <param name="compile.src" value="test"/>
            <param name="compile.classes" value="${test.classes}"/>
            <param name="compile.path" value="test.compile.path"/>
        </antcall>
    </target>

    <target name="run-tests" depends="compile, build-properties, compile-tests">
        <junit forkmode="once" fork="yes" printsummary="yes" failureproperty="test.failed" dir="${build}">
            <classpath>
                <pathelement path="${test.resources}"/>
                <pathelement path="${test.classes}"/>
                <pathelement path="${resources}"/>
                <path refid="test.compile.path"/>
            </classpath>
            <sysproperty key="java.io.tmpdir" value="${temp}"/>
            <formatter type="xml" usefile="true"/>
            <batchtest todir="${test.results}">
                <fileset dir="${test.classes}" includes="**/*Test.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="test-report">
        <junitreport todir="${test.reports}">
            <fileset dir="${test.results}">
                <include name="**/TEST-*.xml"/>
            </fileset>
            <report todir="${test.reports}"/>
        </junitreport>
        <fail if="test.failed" message="Tests failed"/>
    </target>

    <target name="test" depends="run-tests,test-report">
        <fail if="test.failed" message="Tests failed"/>
    </target>

    <path id="fitnesse.path">
        <pathelement path="${test.resources}"/>
        <fileset file="${fitnesse.jar}"/>
        <fileset dir="${lib.runtime}" includes="*.jar"/>
        <!--<fileset dir="${lib.compile}" includes="*.jar"/>-->
    </path>

    <target name="integration-test" depends="jar, compile-tests">
        <java classname="fitnesseMain.FitNesseMain" failonerror="true" fork="true">
            <classpath>
                <path refid="fitnesse.path"/>
            </classpath>
            <sysproperty key="java.io.tmpdir" value="${temp}"/>
            <arg value="-c"/>
            <arg value="FitNesse.SuiteAcceptanceTests?suite&amp;format=text"/>
            <arg value="-p"/>
            <arg value="9234"/>
        </java>
    </target>

    <target name="fitnesse" depends="jar, compile-tests" description="Run the fitnesse wiki">
        <java classname="fitnesseMain.FitNesseMain" failonerror="true" fork="true">
            <classpath>
                <path refid="fitnesse.path"/>
            </classpath>
            <sysproperty key="java.io.tmpdir" value="${temp}"/>
            <arg value="-p"/>
            <arg value="9234"/>
        </java>
    </target>

    <target name="debug-fitnesse" depends="jar, compile-tests"
            description="Run the fitnesse wiki an connect to a listening debugger">
        <java classname="fitnesseMain.FitNesseMain" failonerror="true" fork="true">
            <classpath>
                <path refid="fitnesse.path"/>
            </classpath>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=n,suspend=n,address=8888"/>
            <sysproperty key="java.io.tmpdir" value="${temp}"/>
            <arg value="-p"/>
            <arg value="9234"/>
        </java>
    </target>

    <target name="dist" depends="clean,jar,test,integration-test"
            description="Produce the fitnesse jar and run all automated tests"/>

    <target name="publish-local" depends="dist" description="Publish artifacts to local repository">
        <ivy:publish resolver="local" overwrite="true">
            <artifacts pattern="${dist}/[artifact].[ext]"/>
        </ivy:publish>
    </target>

    <target name="publish-public" depends="dist">
        <ivy:publish resolver="dorothy-public" overwrite="true">
            <artifacts pattern="${dist}/[artifact].[ext]"/>
        </ivy:publish>
    </target>

    <target name="publish-private" depends="dist">
        <ivy:publish resolver="dorothy-private" overwrite="true">
            <artifacts pattern="${dist}/[artifact].[ext]"/>
        </ivy:publish>
    </target>

</project>
